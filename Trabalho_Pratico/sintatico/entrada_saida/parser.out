Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration
Rule 5     statement -> assignment
Rule 6     statement -> print_statement
Rule 7     declaration -> type ID EQUALS expression NEWLINE
Rule 8     assignment -> ID EQUALS expression NEWLINE
Rule 9     print_statement -> PRINT LPAREN expression RPAREN NEWLINE
Rule 10    type -> INT
Rule 11    type -> FLOAT
Rule 12    type -> STR
Rule 13    expression -> NUMBER
Rule 14    expression -> FNUMBER
Rule 15    expression -> STRING
Rule 16    expression -> ID

Terminals, with rules where they appear

EQUALS               : 7 8
FLOAT                : 11
FNUMBER              : 14
ID                   : 7 8 16
INT                  : 10
LPAREN               : 9
NEWLINE              : 7 8 9
NUMBER               : 13
PRINT                : 9
RPAREN               : 9
STR                  : 12
STRING               : 15
error                : 

Nonterminals, with rules where they appear

assignment           : 5
declaration          : 4
expression           : 7 8 9
print_statement      : 6
program              : 0
statement            : 2 3
statement_list       : 1 3
type                 : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . print_statement
    (7) declaration -> . type ID EQUALS expression NEWLINE
    (8) assignment -> . ID EQUALS expression NEWLINE
    (9) print_statement -> . PRINT LPAREN expression RPAREN NEWLINE
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . STR

    ID              shift and go to state 8
    PRINT           shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    STR             shift and go to state 12

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    type                           shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . assignment
    (6) statement -> . print_statement
    (7) declaration -> . type ID EQUALS expression NEWLINE
    (8) assignment -> . ID EQUALS expression NEWLINE
    (9) print_statement -> . PRINT LPAREN expression RPAREN NEWLINE
    (10) type -> . INT
    (11) type -> . FLOAT
    (12) type -> . STR

    $end            reduce using rule 1 (program -> statement_list .)
    ID              shift and go to state 8
    PRINT           shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    STR             shift and go to state 12

    statement                      shift and go to state 13
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    print_statement                shift and go to state 6
    type                           shift and go to state 7

state 3

    (2) statement_list -> statement .

    ID              reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    INT             reduce using rule 2 (statement_list -> statement .)
    FLOAT           reduce using rule 2 (statement_list -> statement .)
    STR             reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> declaration .

    ID              reduce using rule 4 (statement -> declaration .)
    PRINT           reduce using rule 4 (statement -> declaration .)
    INT             reduce using rule 4 (statement -> declaration .)
    FLOAT           reduce using rule 4 (statement -> declaration .)
    STR             reduce using rule 4 (statement -> declaration .)
    $end            reduce using rule 4 (statement -> declaration .)


state 5

    (5) statement -> assignment .

    ID              reduce using rule 5 (statement -> assignment .)
    PRINT           reduce using rule 5 (statement -> assignment .)
    INT             reduce using rule 5 (statement -> assignment .)
    FLOAT           reduce using rule 5 (statement -> assignment .)
    STR             reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)


state 6

    (6) statement -> print_statement .

    ID              reduce using rule 6 (statement -> print_statement .)
    PRINT           reduce using rule 6 (statement -> print_statement .)
    INT             reduce using rule 6 (statement -> print_statement .)
    FLOAT           reduce using rule 6 (statement -> print_statement .)
    STR             reduce using rule 6 (statement -> print_statement .)
    $end            reduce using rule 6 (statement -> print_statement .)


state 7

    (7) declaration -> type . ID EQUALS expression NEWLINE

    ID              shift and go to state 14


state 8

    (8) assignment -> ID . EQUALS expression NEWLINE

    EQUALS          shift and go to state 15


state 9

    (9) print_statement -> PRINT . LPAREN expression RPAREN NEWLINE

    LPAREN          shift and go to state 16


state 10

    (10) type -> INT .

    ID              reduce using rule 10 (type -> INT .)


state 11

    (11) type -> FLOAT .

    ID              reduce using rule 11 (type -> FLOAT .)


state 12

    (12) type -> STR .

    ID              reduce using rule 12 (type -> STR .)


state 13

    (3) statement_list -> statement_list statement .

    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    INT             reduce using rule 3 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 3 (statement_list -> statement_list statement .)
    STR             reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 14

    (7) declaration -> type ID . EQUALS expression NEWLINE

    EQUALS          shift and go to state 17


state 15

    (8) assignment -> ID EQUALS . expression NEWLINE
    (13) expression -> . NUMBER
    (14) expression -> . FNUMBER
    (15) expression -> . STRING
    (16) expression -> . ID

    NUMBER          shift and go to state 20
    FNUMBER         shift and go to state 21
    STRING          shift and go to state 22
    ID              shift and go to state 18

    expression                     shift and go to state 19

state 16

    (9) print_statement -> PRINT LPAREN . expression RPAREN NEWLINE
    (13) expression -> . NUMBER
    (14) expression -> . FNUMBER
    (15) expression -> . STRING
    (16) expression -> . ID

    NUMBER          shift and go to state 20
    FNUMBER         shift and go to state 21
    STRING          shift and go to state 22
    ID              shift and go to state 18

    expression                     shift and go to state 23

state 17

    (7) declaration -> type ID EQUALS . expression NEWLINE
    (13) expression -> . NUMBER
    (14) expression -> . FNUMBER
    (15) expression -> . STRING
    (16) expression -> . ID

    NUMBER          shift and go to state 20
    FNUMBER         shift and go to state 21
    STRING          shift and go to state 22
    ID              shift and go to state 18

    expression                     shift and go to state 24

state 18

    (16) expression -> ID .

    NEWLINE         reduce using rule 16 (expression -> ID .)
    RPAREN          reduce using rule 16 (expression -> ID .)


state 19

    (8) assignment -> ID EQUALS expression . NEWLINE

    NEWLINE         shift and go to state 25


state 20

    (13) expression -> NUMBER .

    NEWLINE         reduce using rule 13 (expression -> NUMBER .)
    RPAREN          reduce using rule 13 (expression -> NUMBER .)


state 21

    (14) expression -> FNUMBER .

    NEWLINE         reduce using rule 14 (expression -> FNUMBER .)
    RPAREN          reduce using rule 14 (expression -> FNUMBER .)


state 22

    (15) expression -> STRING .

    NEWLINE         reduce using rule 15 (expression -> STRING .)
    RPAREN          reduce using rule 15 (expression -> STRING .)


state 23

    (9) print_statement -> PRINT LPAREN expression . RPAREN NEWLINE

    RPAREN          shift and go to state 26


state 24

    (7) declaration -> type ID EQUALS expression . NEWLINE

    NEWLINE         shift and go to state 27


state 25

    (8) assignment -> ID EQUALS expression NEWLINE .

    ID              reduce using rule 8 (assignment -> ID EQUALS expression NEWLINE .)
    PRINT           reduce using rule 8 (assignment -> ID EQUALS expression NEWLINE .)
    INT             reduce using rule 8 (assignment -> ID EQUALS expression NEWLINE .)
    FLOAT           reduce using rule 8 (assignment -> ID EQUALS expression NEWLINE .)
    STR             reduce using rule 8 (assignment -> ID EQUALS expression NEWLINE .)
    $end            reduce using rule 8 (assignment -> ID EQUALS expression NEWLINE .)


state 26

    (9) print_statement -> PRINT LPAREN expression RPAREN . NEWLINE

    NEWLINE         shift and go to state 28


state 27

    (7) declaration -> type ID EQUALS expression NEWLINE .

    ID              reduce using rule 7 (declaration -> type ID EQUALS expression NEWLINE .)
    PRINT           reduce using rule 7 (declaration -> type ID EQUALS expression NEWLINE .)
    INT             reduce using rule 7 (declaration -> type ID EQUALS expression NEWLINE .)
    FLOAT           reduce using rule 7 (declaration -> type ID EQUALS expression NEWLINE .)
    STR             reduce using rule 7 (declaration -> type ID EQUALS expression NEWLINE .)
    $end            reduce using rule 7 (declaration -> type ID EQUALS expression NEWLINE .)


state 28

    (9) print_statement -> PRINT LPAREN expression RPAREN NEWLINE .

    ID              reduce using rule 9 (print_statement -> PRINT LPAREN expression RPAREN NEWLINE .)
    PRINT           reduce using rule 9 (print_statement -> PRINT LPAREN expression RPAREN NEWLINE .)
    INT             reduce using rule 9 (print_statement -> PRINT LPAREN expression RPAREN NEWLINE .)
    FLOAT           reduce using rule 9 (print_statement -> PRINT LPAREN expression RPAREN NEWLINE .)
    STR             reduce using rule 9 (print_statement -> PRINT LPAREN expression RPAREN NEWLINE .)
    $end            reduce using rule 9 (print_statement -> PRINT LPAREN expression RPAREN NEWLINE .)

