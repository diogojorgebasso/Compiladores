Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration
Rule 5     statement -> print_statement
Rule 6     declaration -> type ID EQUALS expression NEWLINE
Rule 7     print_statement -> PRINT LPAREN ID RPAREN NEWLINE
Rule 8     print_statement -> PRINT LPAREN STRING RPAREN NEWLINE
Rule 9     type -> INT
Rule 10    type -> FLOAT
Rule 11    type -> STR
Rule 12    expression -> NUMBER
Rule 13    expression -> FNUMBER
Rule 14    expression -> STRING
Rule 15    expression -> ID
Rule 16    expression -> input_call
Rule 17    input_call -> INPUT LPAREN RPAREN
Rule 18    input_call -> INPUT LPAREN STRING RPAREN

Terminals, with rules where they appear

EQUALS               : 6
FLOAT                : 10
FNUMBER              : 13
ID                   : 6 7 15
INPUT                : 17 18
INT                  : 9
LPAREN               : 7 8 17 18
NEWLINE              : 6 7 8
NUMBER               : 12
PRINT                : 7 8
RPAREN               : 7 8 17 18
STR                  : 11
STRING               : 8 14 18
error                : 

Nonterminals, with rules where they appear

declaration          : 4
expression           : 6
input_call           : 16
print_statement      : 5
program              : 0
statement            : 2 3
statement_list       : 1 3
type                 : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration
    (5) statement -> . print_statement
    (6) declaration -> . type ID EQUALS expression NEWLINE
    (7) print_statement -> . PRINT LPAREN ID RPAREN NEWLINE
    (8) print_statement -> . PRINT LPAREN STRING RPAREN NEWLINE
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . STR

    PRINT           shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STR             shift and go to state 10

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    print_statement                shift and go to state 5
    type                           shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . print_statement
    (6) declaration -> . type ID EQUALS expression NEWLINE
    (7) print_statement -> . PRINT LPAREN ID RPAREN NEWLINE
    (8) print_statement -> . PRINT LPAREN STRING RPAREN NEWLINE
    (9) type -> . INT
    (10) type -> . FLOAT
    (11) type -> . STR

    $end            reduce using rule 1 (program -> statement_list .)
    PRINT           shift and go to state 7
    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STR             shift and go to state 10

    statement                      shift and go to state 11
    declaration                    shift and go to state 4
    print_statement                shift and go to state 5
    type                           shift and go to state 6

state 3

    (2) statement_list -> statement .

    PRINT           reduce using rule 2 (statement_list -> statement .)
    INT             reduce using rule 2 (statement_list -> statement .)
    FLOAT           reduce using rule 2 (statement_list -> statement .)
    STR             reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> declaration .

    PRINT           reduce using rule 4 (statement -> declaration .)
    INT             reduce using rule 4 (statement -> declaration .)
    FLOAT           reduce using rule 4 (statement -> declaration .)
    STR             reduce using rule 4 (statement -> declaration .)
    $end            reduce using rule 4 (statement -> declaration .)


state 5

    (5) statement -> print_statement .

    PRINT           reduce using rule 5 (statement -> print_statement .)
    INT             reduce using rule 5 (statement -> print_statement .)
    FLOAT           reduce using rule 5 (statement -> print_statement .)
    STR             reduce using rule 5 (statement -> print_statement .)
    $end            reduce using rule 5 (statement -> print_statement .)


state 6

    (6) declaration -> type . ID EQUALS expression NEWLINE

    ID              shift and go to state 12


state 7

    (7) print_statement -> PRINT . LPAREN ID RPAREN NEWLINE
    (8) print_statement -> PRINT . LPAREN STRING RPAREN NEWLINE

    LPAREN          shift and go to state 13


state 8

    (9) type -> INT .

    ID              reduce using rule 9 (type -> INT .)


state 9

    (10) type -> FLOAT .

    ID              reduce using rule 10 (type -> FLOAT .)


state 10

    (11) type -> STR .

    ID              reduce using rule 11 (type -> STR .)


state 11

    (3) statement_list -> statement_list statement .

    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    INT             reduce using rule 3 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 3 (statement_list -> statement_list statement .)
    STR             reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)


state 12

    (6) declaration -> type ID . EQUALS expression NEWLINE

    EQUALS          shift and go to state 14


state 13

    (7) print_statement -> PRINT LPAREN . ID RPAREN NEWLINE
    (8) print_statement -> PRINT LPAREN . STRING RPAREN NEWLINE

    ID              shift and go to state 15
    STRING          shift and go to state 16


state 14

    (6) declaration -> type ID EQUALS . expression NEWLINE
    (12) expression -> . NUMBER
    (13) expression -> . FNUMBER
    (14) expression -> . STRING
    (15) expression -> . ID
    (16) expression -> . input_call
    (17) input_call -> . INPUT LPAREN RPAREN
    (18) input_call -> . INPUT LPAREN STRING RPAREN

    NUMBER          shift and go to state 19
    FNUMBER         shift and go to state 20
    STRING          shift and go to state 21
    ID              shift and go to state 17
    INPUT           shift and go to state 23

    expression                     shift and go to state 18
    input_call                     shift and go to state 22

state 15

    (7) print_statement -> PRINT LPAREN ID . RPAREN NEWLINE

    RPAREN          shift and go to state 24


state 16

    (8) print_statement -> PRINT LPAREN STRING . RPAREN NEWLINE

    RPAREN          shift and go to state 25


state 17

    (15) expression -> ID .

    NEWLINE         reduce using rule 15 (expression -> ID .)


state 18

    (6) declaration -> type ID EQUALS expression . NEWLINE

    NEWLINE         shift and go to state 26


state 19

    (12) expression -> NUMBER .

    NEWLINE         reduce using rule 12 (expression -> NUMBER .)


state 20

    (13) expression -> FNUMBER .

    NEWLINE         reduce using rule 13 (expression -> FNUMBER .)


state 21

    (14) expression -> STRING .

    NEWLINE         reduce using rule 14 (expression -> STRING .)


state 22

    (16) expression -> input_call .

    NEWLINE         reduce using rule 16 (expression -> input_call .)


state 23

    (17) input_call -> INPUT . LPAREN RPAREN
    (18) input_call -> INPUT . LPAREN STRING RPAREN

    LPAREN          shift and go to state 27


state 24

    (7) print_statement -> PRINT LPAREN ID RPAREN . NEWLINE

    NEWLINE         shift and go to state 28


state 25

    (8) print_statement -> PRINT LPAREN STRING RPAREN . NEWLINE

    NEWLINE         shift and go to state 29


state 26

    (6) declaration -> type ID EQUALS expression NEWLINE .

    PRINT           reduce using rule 6 (declaration -> type ID EQUALS expression NEWLINE .)
    INT             reduce using rule 6 (declaration -> type ID EQUALS expression NEWLINE .)
    FLOAT           reduce using rule 6 (declaration -> type ID EQUALS expression NEWLINE .)
    STR             reduce using rule 6 (declaration -> type ID EQUALS expression NEWLINE .)
    $end            reduce using rule 6 (declaration -> type ID EQUALS expression NEWLINE .)


state 27

    (17) input_call -> INPUT LPAREN . RPAREN
    (18) input_call -> INPUT LPAREN . STRING RPAREN

    RPAREN          shift and go to state 30
    STRING          shift and go to state 31


state 28

    (7) print_statement -> PRINT LPAREN ID RPAREN NEWLINE .

    PRINT           reduce using rule 7 (print_statement -> PRINT LPAREN ID RPAREN NEWLINE .)
    INT             reduce using rule 7 (print_statement -> PRINT LPAREN ID RPAREN NEWLINE .)
    FLOAT           reduce using rule 7 (print_statement -> PRINT LPAREN ID RPAREN NEWLINE .)
    STR             reduce using rule 7 (print_statement -> PRINT LPAREN ID RPAREN NEWLINE .)
    $end            reduce using rule 7 (print_statement -> PRINT LPAREN ID RPAREN NEWLINE .)


state 29

    (8) print_statement -> PRINT LPAREN STRING RPAREN NEWLINE .

    PRINT           reduce using rule 8 (print_statement -> PRINT LPAREN STRING RPAREN NEWLINE .)
    INT             reduce using rule 8 (print_statement -> PRINT LPAREN STRING RPAREN NEWLINE .)
    FLOAT           reduce using rule 8 (print_statement -> PRINT LPAREN STRING RPAREN NEWLINE .)
    STR             reduce using rule 8 (print_statement -> PRINT LPAREN STRING RPAREN NEWLINE .)
    $end            reduce using rule 8 (print_statement -> PRINT LPAREN STRING RPAREN NEWLINE .)


state 30

    (17) input_call -> INPUT LPAREN RPAREN .

    NEWLINE         reduce using rule 17 (input_call -> INPUT LPAREN RPAREN .)


state 31

    (18) input_call -> INPUT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 32


state 32

    (18) input_call -> INPUT LPAREN STRING RPAREN .

    NEWLINE         reduce using rule 18 (input_call -> INPUT LPAREN STRING RPAREN .)

